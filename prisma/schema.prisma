// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(cuid())
  username String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("admins")
}

model Parent {
  id       String  @id @default(cuid())
  username String  @unique
  name     String
  surname  String
  email    String? @unique
  phone    String? @unique
  address String 

  studnets Student[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("parents")
}

model Teacher {
  id       String  @id @default(cuid())
  username String  @unique
  name     String
  surname  String
  email    String? @unique
  phone    String? @unique
  address String 
  img String?
  blood_type String 
  sex UserSex
  birthday DateTime

  classes Class[]
  lessons Lesson[]
  subjects Subject[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("teachers")
}


model Grade{
  id Int @id @default(autoincrement())
  level Int @unique 

  classes Class[]
  students Student[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("grades")
}

model Class{
  id Int @id @default(autoincrement())
  name String @unique
  capacity Int
  supervisor_id String?
  grade_id Int

  supervisor Teacher? @relation(fields: [supervisor_id], references: [id], onDelete: Cascade) 
  grade Grade @relation(fields: [grade_id], references: [id], onDelete: Cascade)

  students Student[]
  lessons Lesson[]
  events Event[]
  announcements Announcement[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("classes")
}

model Student {
  id       String  @id @default(cuid())
  username String  @unique
  name     String
  surname  String
  email    String? @unique
  phone    String? @unique
  address String 
  img String?
  blood_type String?
  sex UserSex
  birthday DateTime
  grade_id Int
  class_id Int
  parent_id String

  grade Grade @relation(fields: [grade_id], references: [id], onDelete:Cascade)
  class Class @relation(fields: [class_id], references: [id], onDelete:Cascade)
  parent Parent @relation(fields: [parent_id], references: [id], onDelete:Cascade)

  results Result[]
  attendances Attendance[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Subject{
  id Int @id @default(autoincrement())
  name String @unique

  lessons Lesson[]
  teachers Teacher[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("subjects")
}

model Lesson{
  id Int @id @default(autoincrement())
  name String
  day Day
  start_time DateTime
  end_time DateTime
  subject_id Int
  class_id Int
  teacher_id String

  exams Exam[]
  assignments Assignment[]
  attendances Attendance[]

  subject Subject @relation(fields: [subject_id], references: [id], onDelete:Cascade)
  class Class @relation(fields: [class_id], references: [id], onDelete:Cascade)
  teacher Teacher @relation(fields: [teacher_id], references: [id], onDelete:Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("lessons")
}

model Exam{
  id Int @id @default(autoincrement())
  title String
  start_time DateTime
  end_time DateTime
  lesson_id Int

  lesson Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  results Result[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("exams")
}

model Assignment{
  id Int @id @default(autoincrement())
  title String
  start_date DateTime
  due_date DateTime
  lesson_id Int

  lesson Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  results Result[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("assignments")
}

model Result{
  id Int @id @default(autoincrement())
  score Int
  exam_id Int?
  assignment_id Int?
  setudent_id String

  exam Exam? @relation(fields: [exam_id], references: [id], onDelete:Cascade)
  assignment Assignment? @relation(fields: [assignment_id], references: [id], onDelete:Cascade)
  student Student @relation(fields: [setudent_id], references: [id], onDelete: Cascade)
 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("results")
}

model Event {
  id Int @id @default(autoincrement())
  title String
  description String
  start_time DateTime
  end_time DateTime
  class_id Int?

  class Class? @relation(fields: [class_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("events")
}

model Announcement{
  id Int @id @default(autoincrement())
  title String
  description String
  date DateTime
  class_id Int?

  class Class? @relation(fields: [class_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("announcements")
}

model Attendance{
  id Int @id @default(autoincrement())
  date DateTime
  presen Boolean
  student_id String
  lesson_id Int

  student Student @relation(fields: [student_id], references: [id], onDelete:Cascade)
  lesson Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  @@map("attendances")
}

enum UserSex{
  MALE 
  FEMALE
}

enum Day{
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
